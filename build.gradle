import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id "io.freefair.lombok" version "8.7.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "dev.tocraft.preprocessor" version "1.0"
    id 'maven-publish'
    id "com.hypherionmc.modutils.orion" version "1.0.+"
}

group = 'dev.firstdark.discordrpc'

orion.setup {
    versioning {
        identifier("release")
        uploadBuild(true)
    }
}

repositories {
    mavenCentral()
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    implementation "com.google.code.gson:gson:${gson}"
    implementation "org.jetbrains:annotations:${jetbrains}"
    implementation "org.slf4j:slf4j-api:${slf4j}"

    shade("com.kohlschutter.junixsocket:junixsocket-common:${junix}")
    shade("com.kohlschutter.junixsocket:junixsocket-native-common:${junix}")

    runtimeOnly "ch.qos.logback:logback-classic:${logback}"
}

shadowJar {
    from sourceSets.main.output
    configurations = [project.configurations.shade]

    // Remove stuff we don't need from the jar
    exclude("**/DEPENDENCIES*")
    exclude("**/LICENSE*")
    exclude("**/Log4J*")
    exclude("logback.xml")
    exclude("META-INF/NOTICE*")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/native-image/**")

    // Remove unneeded/unsupported platforms
    exclude("lib/*BSD*/**")
    exclude("lib/*Sun*/**")
    exclude("lib/*Window*/**")
    exclude("lib/aarch64-Linux*/**")
    exclude("lib/ppc*/**")
    exclude("lib/risc*/**")
    exclude("lib/s390x*/**")
    exclude("lib/arm*/**")

    setArchiveClassifier('dev-shadow')
    mergeServiceFiles()
}

tasks.register("compileLegacy", org.gradle.jvm.tasks.Jar) {
    setArchiveClassifier("legacy")
    compileJava.options.release.set(8)
    from(zipTree(shadowJar.archiveFile))
    dependsOn(shadowJar)

    doLast {
        delete(shadowJar.archiveFile)
    }
}

tasks.register("compileModern", org.gradle.jvm.tasks.Jar) {
    preprocess.vars.put("modernjava", "1")
    compileJava.options.release.set(16)
    from(sourceSets.main.output)
    dependsOn(compileJava)
}

tasks.register("buildAll", DefaultTask) {
    dependsOn(compileLegacy, compileModern)
    group("build")
}

tasks.register('javadocJar', Jar) {
    from javadoc
    setArchiveClassifier('javadoc')
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    setArchiveClassifier('sources')
}

tasks.register("testJar", ShadowJar) {
    from sourceSets.test.output, sourceSets.main.output
    group("build")
    setArchiveClassifier("test")

    configurations = [project.configurations.runtimeClasspath]

    // Remove stuff we don't need from the jar
    exclude("**/DEPENDENCIES*")
    exclude("**/LICENSE*")
    exclude("**/Log4J*")
    exclude("logback.xml")
    exclude("META-INF/NOTICE*")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/native-image/**")

    // Remove unneeded/unsupported platforms
    exclude("lib/*BSD*/**")
    exclude("lib/*Sun*/**")
    exclude("lib/*Window*/**")
    exclude("lib/aarch64-Linux*/**")
    exclude("lib/ppc*/**")
    exclude("lib/risc*/**")
    exclude("lib/s390x*/**")
    exclude("lib/arm*/**")

    mergeServiceFiles()

    manifest {
        attributes(
                "Main-Class" : "RPCTest"
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(compileLegacy) {
                builtBy compileLegacy
            }
            artifact(compileModern) {
                builtBy compileModern
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven orion.getPublishingMaven()
    }
}

javadoc.enabled = true